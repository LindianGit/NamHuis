 use database samsungdb;
use schema samsung_schema;

use role samooha_app_role;

-- Step 1: Set up security role and compute warehouse
use role sysadmin;
USE WAREHOUSE app_wh;

-- Step 4: Switch to Samooha application role for clean room configuration
USE ROLE samooha_app_role;
SET cleanroom_name = 'SAMSUNG_ARGOS';

-- Step 5: Initialize the clean room
CALL samooha_by_snowflake_local_db.provider.cleanroom_init($cleanroom_name, 'INTERNAL');

-- Step 6: Register the provider database so the clean room API layer can access it
CALL samooha_by_snowflake_local_db.provider.register_db('samsungdb');

-- Step 7: Link the provider tables to the clean room --- this is where the source_table in the template comes from
CALL samooha_by_snowflake_local_db.provider.link_datasets($cleanroom_name,
  [
    'SAMSUNGDB.SAMSUNG_SCHEMA.SEUK_GB_EN_AEP_CRM1_MX_FLIPPII_PROP96_100_SNOWFLAKE_EO',
    'SAMSUNGDB.SAMSUNG_SCHEMA.SEUK_GB_EN_AEP_CRM1_MX_FOLDPII_PROP91_100_SNOWFLAKE_EO',
    'SAMSUNGDB.SAMSUNG_SCHEMA.SEUK_GB_EN_AEP_CRM1_MX_FLIPPII_PROP91_100_SNOWFLAKE_EO',
    'SAMSUNGDB.SAMSUNG_SCHEMA.SEUK_GB_EN_AEP_CRM1_MX_FOLDPII_PROP96_100_SNOWFLAKE_EO'
  ]
);

CALL samooha_by_snowflake_local_db.provider.view_provider_datasets($cleanroom_name);

-- Step 8: Restrict joinable columns to hashedEmails only ON ALL TABLES
CALL samooha_by_snowflake_local_db.provider.set_join_policy($cleanroom_name,
  [
    'SAMSUNGDB.SAMSUNG_SCHEMA.SEUK_GB_EN_AEP_CRM1_MX_FLIPPII_PROP96_100_SNOWFLAKE_EO:hashedEmails',
    'SAMSUNGDB.SAMSUNG_SCHEMA.SEUK_GB_EN_AEP_CRM1_MX_FOLDPII_PROP91_100_SNOWFLAKE_EO:hashedEmails',
    'SAMSUNGDB.SAMSUNG_SCHEMA.SEUK_GB_EN_AEP_CRM1_MX_FLIPPII_PROP91_100_SNOWFLAKE_EO:hashedEmails',
    'SAMSUNGDB.SAMSUNG_SCHEMA.SEUK_GB_EN_AEP_CRM1_MX_FOLDPII_PROP96_100_SNOWFLAKE_EO:hashedEmails'
  ]
);

CALL samooha_by_snowflake_local_db.provider.view_join_policy($cleanroom_name);

-- Step 10: Add the custom SQL template for allowed overlap join
SET template_name = 'overlap_template';

-- If you want to allow the consumer to join to ANY of the 4 provider tables,
-- you can let the template use the source_table parameter (as below),
-- or create 4 different templates, one per table.
--Custom clean room template reference | Snowflake Documentation
CALL samooha_by_snowflake_local_db.provider.add_custom_sql_template( 
    $cleanroom_name, 
    $template_name, 
    $$ 
        SELECT c.hashedEmails 
        FROM identifier({{ source_table[0] }}) p 
        JOIN {{ my_table[0] }} c 
        ON p.hashedEmails = c.hashedEmails; 
    $$ 
); 

CALL samooha_by_snowflake_local_db.provider.view_added_templates($cleanroom_name);

-- Step 11: Set default release directive (versioning for clean room)
CALL samooha_by_snowflake_local_db.provider.set_default_release_directive($cleanroom_name, 'V1_0', '0');

-- Step 12: Share the clean room with the consumer account
use role accountadmin;

CALL samooha_by_snowflake_local_db.provider.add_consumers(
  $cleanroom_name,
  'SAINSBURYS-SAINSBURYS', -- Consumer's Snowflake Account Identifier
  'SFPSCOGS_AM_DCR_CONSUMER' -- Consumer's role for clean room access
);

CALL samooha_by_snowflake_local_db.provider.view_consumers($cleanroom_name);

-- Step 13: Publish the clean room so the consumer can access it
CALL samooha_by_snowflake_local_db.provider.create_or_update_cleanroom_listing($cleanroom_name);

-- Checks: see all tables currently linked
CALL samooha_by_snowflake_local_db.provider.view_provider_datasets($cleanroom_name); 
